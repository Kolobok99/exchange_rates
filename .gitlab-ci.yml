image: docker:latest
services:
  - docker:dind

stages:
  - build

before_script:
  - export IMAGE=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
  - export WEB_IMAGE=$IMAGE:web
#  - export DB_IMAGE=$IMAGE:db
  - export NGINX_IMAGE=$IMAGE:nginx

  - apk add --no-cache bash
  - chmod +x ./backend/scripts/setup_prod_env.sh
  - sh ./backend/scripts/setup_prod_env.sh
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY


build:
  stage: build
  script:
    - docker pull $IMAGE:web || true
#    - docker pull $IMAGE:db || true
    - docker pull $IMAGE:nginx || true
    - docker-compose -f ./docker-composes/docker-compose.ci.yml build
    - docker push $IMAGE
#    - docker push $IMAGE:db
    - docker push $IMAGE:nginx
  tags:
    - docker



# ------------------------------------------------
    ########################
    # Последняя моя версия #
    ########################


#image: docker:latest
#services:
#  - docker:dind
#
#variables:
#  D_C_DEV: docker-compose -f docker-composes/dev_ci_docker-compose.yml
#  D_C_PROD: docker-compose -f docker-composes/prod_cd_docker-compose.yml
#
#stages:
#  - test
#  - build
#  - deploy
#
##test:
##  stage: test
##  before_script:
##    - ${D_C_DEV} up -d --build
##  script:
##    - ${D_C_DEV} exec web bash -c " scripts/wait_db.sh && python manage.py test"
##  tags:
##    - docker
#
#build:
#  stage: build
#  before_script:
#    - apk add --no-cache bash
#    - chmod +x ./backend/scripts/setup_prod_env.sh
#    - bash ./backend/scripts/setup_prod_env.sh
#    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#  script:
#    - docker build -t registry.gitlab.com/izolotavin99/exchange_rates_project  -f ./backend/Dockerfile.prod .
#    - docker push registry.gitlab.com/izolotavin99/exchange_rates_project
#
#  tags:
#    - docker










#----------------------------------------------------------------------
  #######################################
  # WORK WITH PROD TEST and BUILD stage #
  #######################################
#
#image: docker:latest
#services:
#  - docker:dind
#
#variables:
#  D_C_DEV: docker-compose -f docker-composes/dev_ci_docker-compose.yml
#  D_C_PROD: docker-compose -f docker-composes/prod_cd_docker-compose.yml
#
#stages:
#  - test
#  - build
#  - deploy
#
#test:
#  stage: test
#  before_script:
#    - ${D_C_DEV} up -d --build
#  script:
#    - ${D_C_DEV} exec web bash -c " scripts/wait_db.sh && python manage.py test"
#  tags:
#    - docker
#
#build:
#  stage: build
#  before_script:
#    - apk add --no-cache bash
#    - chmod +x ./backend/scripts/setup_prod_env.sh
#    - bash ./backend/scripts/setup_prod_env.sh
#    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#  script:
#    - ${D_C_PROD} build
#    - docker push
#
#  tags:
#    - docker








#--------------------------------------------------------------------------

  ##########################
  # WORK WITH PROD BUILD stage #
  ##########################

#image: docker:latest
#services:
#  - docker:dind
#
#variables:
#  D_C_DEV: docker-compose -f docker-composes/dev_ci_docker-compose.yml
#  D_C_PROD: docker-compose -f docker-composes/prod_cd_docker-compose.yml
#
#stages:
#  - test
#  - build
#  - deploy
#
#
#build:
#  stage: build
#  before_script:
#    - apk add --no-cache bash
#    - chmod +x ./backend/scripts/setup_prod_env.sh
#    - bash ./backend/scripts/setup_prod_env.sh
#    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#  script:
#    - ${D_C_PROD} up --build




# -----------------------------------------

  ##########################
  # WORK WITH TEST stage #
  ##########################

#image: docker:latest
#services:
#  - docker:dind
#
#variables:
#  D_C_DEV: docker-compose -f docker-composes/dev_ci_docker-compose.yml
#  D_C_PROD: docker-compose -f docker-composes/prod_cd_docker-compose.yml
#
#stages:
#  - test
#  - build
#  - deploy
#
#test:
#  stage: test
#  before_script:
#    - ${D_C_DEV} up -d --build
#  script:
#    - ${D_C_DEV} exec web bash -c " scripts/wait_db.sh && python manage.py test"
#  tags:
#    - docker












# -------------------------------------------------------
    #############
    # IT"S WORK!#
    #############

#docker-build:
#  image: docker:latest
#  stage: build
#  services:
#    - docker:dind
#  before_script:
#    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#  script:
#    - docker-compose -f docker-composes/dev_ci_docker-compose.yml images
#  tags:
#    - docker

# -------------------------------------------------------

# ERROR Couldn't connect to Docker daemon at https://docker:2375 - is it running?

#image: docker:latest
#services:
#  - docker:dind
#
#stages:
#  - build
#
#
#before_script:
#  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
#
#
#build:
#  stage: build
#  script:
#     - docker-compose -f docker-composes/dev_ci_docker-compose.yml images
#  tags:
#  - docker

# -------------------------------------------------------

# ERROR daemon !!! localhost !!!

#image: docker:stable
#services:
#  - docker:19-dind
#
#stages:
#  - build
#
#variables:
#  DOCKER_HOST: tcp://localhost:2375/
#  DOCKER_DRIVER: overlay2
#
#before_script:
#  - whoami
#  - apk add docker-compose
#  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
#
#
#build:
#  stage: build
#  script:
#     - docker-compose -f docker-composes/dev_ci_docker-compose.yml images
#  tags:
#  - docker



# -------------------------------------------------------

# ERROR: Couldn't connect to Docker daemon at http://docker:2375 - is it running?

#image: docker:stable
#services:
#  - docker:dind
#
#stages:
#  - build
#
#
#before_script:
#  - apk add docker-compose
#  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
#
#build:
#  stage: build
#  script:
#     - docker-compose -f docker-composes/dev_ci_docker-compose.yml images
#  tags:
#  - docker

#--------------------------------------------------------

# Error Job failed: failed to pull image "docker/compose:stable

#image: docker/compose:stable
#
#services:
#  - docker:stable
#
#stages:
#  - build
#build:
#  stage: build
#  script:
#    - docker-compose -f dev_ci_docker-compose.yml images
#  tags:
#    - docker



#------------------------------------------------------------

# ERROR: docker-compose: not found

#image: docker:stable
#
#services:
#  - docker:stable
#
#stages:
#  - build
#
#build:
#  stage: build
#  script:
#    - docker-compose -f dev_ci_docker-compose.yml images
#  tags:
#    - docker

#-------------------------------------------------------------



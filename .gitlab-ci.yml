image: docker:latest
services:
    - docker:dind

stages:
  - build
  - test
#  - deploy

before_script:
    # установка pip
#    - apt install --no-cache py-pip
    # установка docker-compose
#    - pip install docker-compose
    # логин в Gitlab Docker registry
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY

# Сборка Docker-образа
build:
    stage: build
    script:
        # собственно сборка
        - docker-compose infra/prod_docker-compose.yml build
        # отправка собранного в registry
        - docker-compose push

# Прогон тестов
test:
    stage: test
    script:
        # вместо повторной сборки, забираем собранный на предыдущей ступени
        #  готовый образ из registry
        - docker-compose pull test
        # запускаем тесты
        - docker-compose run test

## Выкат на сервер
#deploy:
#    stage: deploy
#    # выкатываем только ветку master
#    only:
#        - master
#    # для этой ступени другие команды инициализации
#    before_script:
#        # устанавливаем зависимости Fabric, bash и rsync
#        - apk add --no-cache openssh-client py-pip py-crypto bash rsync
#        # устанавливаем Fabric
#        - pip install fabric==1.12.0
#        # добавляем приватный ключ для выката
#        - eval $(ssh-agent -s)
#        - bash -c 'ssh-add <(echo "$DEPLOY_KEY")'
#        - mkdir -p ~/.ssh
#        - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
#    script:
#        - fab -H $DEPLOY_ADDR deploy